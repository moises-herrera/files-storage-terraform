apiVersion: v1
kind: ServiceAccount
metadata:
  name: backend-service-account
  namespace: cloudnest-app
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::802041176838:role/cloudnest-backend-secrets-role
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: cloudnest-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      serviceAccountName: backend-service-account
      nodeSelector:
        role: backend
      containers:
        - name: backend
          image: 802041176838.dkr.ecr.us-east-1.amazonaws.com/moisesh21/files-storage-backend:latest
          ports:
            - containerPort: 3000
          env:
            - name: AWS_REGION
              value: "us-east-1"
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: "3000"
            - name: FRONTEND_URL
              value: "http://k8s-cloudnes-frontend-27289c282c-37c7622f9c1942cb.elb.us-east-1.amazonaws.com"
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      tolerations:
        - key: "app"
          operator: "Equal"
          value: "backend"
          effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: cloudnest-app
spec:
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backend-ingress
  namespace: cloudnest-app
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
spec:
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: backend-service
                port:
                  number: 80
