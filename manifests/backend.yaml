apiVersion: v1
kind: ServiceAccount
metadata:
  name: backend-service-account
  namespace: cloudnest-app
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::802041176838:role/cloudnest-backend-secrets-role
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: cloudnest-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      serviceAccountName: backend-service-account
      nodeSelector:
        role: backend
      containers:
        - name: backend
          image: 802041176838.dkr.ecr.us-east-1.amazonaws.com/moisesh21/files-storage-backend:latest
          ports:
            - containerPort: 3000
          env:
            - name: AWS_REGION
              value: 'us-east-1'
            - name: NODE_ENV
              value: 'production'
            - name: PORT
              value: '3000'
            - name: FRONTEND_URL
              value: 'http://k8s-cloudnes-frontend-0293d839e2-8ae22faa45a01a89.elb.us-east-1.amazonaws.com'
            - name: AWS_SECRET_NAME
              value: 'cloudnest-app'
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            requests:
              memory: '256Mi'
              cpu: '250m'
            limits:
              memory: '512Mi'
              cpu: '500m'
      tolerations:
        - key: 'app'
          operator: 'Equal'
          value: 'backend'
          effect: 'NoSchedule'
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: cloudnest-app
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: external
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
spec:
  type: LoadBalancer
  selector:
    app: backend
  ports:
    - port: 80
      targetPort: 3000
